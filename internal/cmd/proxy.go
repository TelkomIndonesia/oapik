package cmd

import (
	"log"

	"github.com/telkomindonesia/oapik/internal/proxy"
)

type Proxy struct {
	Input         string `arg:"" help:"path to input OAS file"`
	OASPath       string `arg:"" help:"path to generated OAS file"`
	GoPath        string `arg:"" optional:"" help:"path to generated go file"`
	GoPackageName string `short:"p" help:"the name of go package" default:"oapik"`
}

func (p Proxy) Run(ctx Context) error {
	{

		content, err := proxy.Compile(ctx, p.Input)
		if err != nil {
			log.Fatalln("fail to compiles file:", err)
		}
		content = append([]byte("# Code generated by oapik. DO NOT EDIT.\n"), content...)
		if err = write(p.OASPath, content); err != nil {
			log.Fatalln(err)
		}
	}

	if p.GoPath == "" {
		return nil
	}

	{
		content, err := proxy.Generate(ctx, p.Input, proxy.GenerateOptions{
			PackageName: p.GoPackageName,
		})
		if err != nil {
			log.Fatalln("fail to compiles file:", err)
		}
		content = append([]byte("// Code generated by oapik. DO NOT EDIT.\n"), content...)
		if err = write(p.GoPath, content); err != nil {
			log.Fatalln(err)
		}
	}

	return nil
}
