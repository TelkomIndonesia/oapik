type strictRequest interface{
    ToRequest(base *http.Request) (*http.Request,error) 
}

{{range .}}
    {{$opid := .OperationId -}}
    type {{$opid | ucFirst}}RequestObject struct {
        {{range .PathParams -}}
            {{.GoName | ucFirst}} {{.TypeDef}} {{.JsonTag}}
        {{end -}}
        {{if .RequiresParamObject -}}
            Params {{$opid}}Params
        {{end -}}
    }

    func ( r {{$opid | ucFirst}}RequestObject) ToRequest(base *http.Request) (*http.Request,error) {
        return base,nil
    }

{{end}}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
{{range .}}{{.SummaryAsComment }}
// ({{.Method}} {{.Path}})
{{$opid := .OperationId -}}
{{$opid}}(ctx context.Context, request {{$opid | ucFirst}}RequestObject) ({{ (or (upstreamOperationID $opid | camelCase)  $opid) | ucFirst}}RequestObject, error)
{{end}}{{/* range . */ -}}
}

type StrictUpstreamInterface interface {
{{range upstreams}}
    {{. | camelCase}}() http.HandlerFunc 
{{end}}
} 

type StrictOperationsMap[T any] struct{
{{range .}}
    {{.OperationId | ucFirst}} T
{{- end}}   
}

func (s StrictOperationsMap[T]) Get(opid string) (t T, found bool) {
    switch opid {
    {{- range .}}
    case "{{.OperationId}}": 
        return s.{{.OperationId | ucFirst}}, true
    {{end}}   
    }

    return t, false
}

func (s StrictOperationsMap[T]) ToMap() (m map[string]T) {
    return map[string]T{
    {{- range .}}
        "{{.OperationId}}": s.{{.OperationId | ucFirst}},
    {{- end}}  
    }
}

{{ writeExtensionType . "StrictExtensionsStruct" }}

type StrictOperationsDataStruct struct {
    Extension StrictExtensionsStruct
}
var StrictOperationsData = func() (m StrictOperationsMap[StrictOperationsDataStruct]) {
{{- range .}}
    {
        b := []byte({{ writeExtensionData . }})
        if err := json.Unmarshal(b, &m.{{.OperationId}}.Extension); err != nil {
            panic(err)
        }
    }
{{- end}} 
    
    return
}()