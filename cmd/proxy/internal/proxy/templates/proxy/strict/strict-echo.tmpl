type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, sui StrictUpstreamInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
    return &strictHandler{ssi: ssi, sui: sui, middlewares: middlewares}
}

type strictHandler struct {
    ssi StrictServerInterface
    sui StrictUpstreamInterface
    middlewares []StrictMiddlewareFunc
}


{{range .}}
    {{$opid := .OperationId}}
    // {{$opid}} operation middleware
    func (sh *strictHandler) {{.OperationId}}(ctx echo.Context{{genParamArgs .PathParams}}{{if .RequiresParamObject}}, params {{.OperationId}}Params{{end}}) error {
        var request {{$opid | ucFirst}}RequestObject

        {{range .PathParams -}}
            request.{{.GoName}} = {{.GoVariableName}}
        {{end -}}

        {{if .RequiresParamObject -}}
            request.Params = params
        {{end -}}

        handler := func(ctx echo.Context, request interface{}) (interface{}, error){
            return sh.ssi.{{.OperationId}}(ctx.Request().Context(), request.({{$opid | ucFirst}}RequestObject))
        }
        for _, middleware := range sh.middlewares {
            handler = middleware(handler, "{{.OperationId}}")
        }

        obj, err := handler(ctx, request)
        if err != nil {
            return err
        } 

        outreq, err := obj.(strictRequest).ToRequest(ctx.Request())
        if err != nil {
            return err
        }

        sh.sui.{{ upstream $opid }}()(ctx.Response(),outreq)

        return nil
    }
{{end}}
