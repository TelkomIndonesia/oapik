// Package testgen provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package testgen

import (
	"fmt"
	"net/http"
	"net/url"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// UpstreamProfileProfile defines model for UpstreamProfileProfile.
type UpstreamProfileProfile struct {
	Dob      UpstreamProfileZeroableTime   `json:"dob,omitempty"`
	Email    UpstreamProfileZeroableString `json:"email,omitempty"`
	Id       UpstreamProfileUUID           `json:"id,omitempty"`
	Name     UpstreamProfileZeroableString `json:"name,omitempty"`
	Nin      UpstreamProfileZeroableString `json:"nin,omitempty"`
	Phone    UpstreamProfileZeroableString `json:"phone,omitempty"`
	TenantId UpstreamProfileUUID           `json:"tenant_id,omitempty"`
}

// UpstreamProfileUUID defines model for UpstreamProfileUUID.
type UpstreamProfileUUID = openapi_types.UUID

// UpstreamProfileZeroableString defines model for UpstreamProfileZeroableString.
type UpstreamProfileZeroableString = string

// UpstreamProfileZeroableTime defines model for UpstreamProfileZeroableTime.
type UpstreamProfileZeroableTime = time.Time

// UpstreamProfileProfileID defines model for UpstreamProfileProfileID.
type UpstreamProfileProfileID = UpstreamProfileUUID

// UpstreamProfileError defines model for UpstreamProfileError.
type UpstreamProfileError struct {
	Id UpstreamProfileUUID `json:"id,omitempty"`
}

// UpstreamProfileGetProfileParams defines parameters for UpstreamProfileGetProfile.
type UpstreamProfileGetProfileParams struct {
	SomeQuery *string `form:"some-query,omitempty" json:"some-query,omitempty"`
}

// UpstreamProfilePutProfileParams defines parameters for UpstreamProfilePutProfile.
type UpstreamProfilePutProfileParams struct {
	SomeQuery *string `form:"some-query,omitempty" json:"some-query,omitempty"`
}

/* ignored */

/* ignored */

/* ignored */

/* ignored */

/* ignored */

type UpstreamProfileGetProfileRequestObject struct {
	TenantId  UpstreamProfileUUID      `json:"tenant-id"`
	ProfileId UpstreamProfileProfileID `json:"profile-id"`
	Params    UpstreamProfileGetProfileParams
}

func (r UpstreamProfileGetProfileRequestObject) ToRequest(base *http.Request) (*http.Request, error) {

	tenantId := r.TenantId
	profileId := r.ProfileId
	params := r.Params

	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenant-id", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "profile-id", runtime.ParamLocationPath, profileId)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenants/%s/profiles/%s", pathParam0, pathParam1)
	queryURL, err := url.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.SomeQuery != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "some-query", runtime.ParamLocationQuery, *params.SomeQuery); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req := base.Clone(base.Context())
	req.URL = queryURL

	return req, nil
}

type UpstreamProfilePutProfileRequestObject struct {
	TenantId  UpstreamProfileUUID      `json:"tenant-id"`
	ProfileId UpstreamProfileProfileID `json:"profile-id"`
	Params    UpstreamProfilePutProfileParams
}

func (r UpstreamProfilePutProfileRequestObject) ToRequest(base *http.Request) (*http.Request, error) {

	tenantId := r.TenantId
	profileId := r.ProfileId
	params := r.Params

	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenant-id", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "profile-id", runtime.ParamLocationPath, profileId)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenants/%s/profiles/%s", pathParam0, pathParam1)
	queryURL, err := url.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.SomeQuery != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "some-query", runtime.ParamLocationQuery, *params.SomeQuery); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req := base.Clone(base.Context())
	req.URL = queryURL

	return req, nil
}

/* ignored */
